- express 
the web application framework(light) which can do something automatically for youï¼Œ also means you have less control.
use() method to tell the express serve the content
set() method to tell the express to set the default file type
partials to simplify the same pattern html code

- ejs
embedded JavaScript templates which allow us write javascript code in HTML file to make HTML dynamically.
<% %> use when just do the logic
<%= %> the return value will render to the page and add directly to html 
<%- %> run the content in it as a code rather than string
// pass variable into a template file
{variable_name_inside_the_template: variable_we_define} 

- body-parser
body-parser groups all the post request information into a single body object.
// tell express to use body-parser
app.use(bodyParser.urlencoded({extended: true}));

- request
simplified HTTP request client to make http calls in js node.(in order to use other API such as yahoo weather api)
note: when we get the data back, the return body is actually a JSON string. 
Therefore before we use it, we need to use JSON.parse(body) to convert it to JS object.

- mongoose
make it easier to interact with database
// used to connect a database
* mongoose.connect("database_path"); 
Schema:
// define a pattern
* var name_Schema = mongoose.Schema(object);
// compile schema to a model
* mongoose.model("model_name", nameSchema); 
there are two ways to associate data:
1. embeded data 
2. object reference: 
// to get the original comments data througth object reference
use model_name.findById(req.params.id).populate("comments").exec(error, callback(err, item_found){}); 
Deal with database:
// save the change of object to database
* object_inDB.save() 
// add and save an new object to database
* model_name.create(object, callback(err, item_created); 
// to find a specific items in database
* model_name.find({specific}, callback(err, item_found) {}); 
// to find the item with provided id
* model_name.findById(req.params.id, callback(err, item_found) {}); 
// to find and update item
* model_name.findByIdAndUpdate(req.params.id, req.params.newContent, callback(err, item_update) {}); 
// to find and delete item in database
* model_name.findByIdAndRemove(req.params.id, callback(err) {}); 

- method-override
HTML form don't support PUT/DELETE request, 
therefore we use method-override package to make a cheat and
when it sees "_method", it will treat the get/post method as put/delete method

- express-sanitizer
used in change items in database(create, update) and middleware, 
it gets rid of bad thing like alert() in the input object

- passport
the authentication middleware for Node.js (+300 strategy)
// tell the express to use passport.
app.use(passport.initialize()); 
// create a new strategy using User.authenticate() method which is passing from passportLocalMongoose
passport.use(new LocalStrategy(User.authenticate()));
// responsible for reading the session and taking the data from session that's encoded and unencoded it.
passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser()); 

- passport-local
username and password authentication strategy for Passport and Node.js
- passport-local-mongoose
a mongoose plugin that simplifies building username and password login with Passport
// add some methods in passportLocalMongoose package to UserSchema.
UserSchema.plugin(passportLocalMongoose); 

- express-session
a way to provide state when login
// tell the express to use session.
app.use(require("express-session")({
    secret: "This is a secret page",
    resave: false,
    saveUninitialized: false
}));
app.use(passport.session()); 
