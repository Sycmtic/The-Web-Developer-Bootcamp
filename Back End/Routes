note: 
- use "*" to define every other routes that we did not define, usually used to set error page
- use ":" to define a route pattern
- req object contains all the information about the incoming request, 
  ex: "req.params" contains all of route parameters and their corresponding values which can use to get subroute
      "req.body" contains all the post request information(express do not create it, so we need to use body-parser)
      "req.query" contains all the get request information from a form(request api)
      "object._id" is the id that mongoDB automatically create for its object
      "req.params.id" is used to get the id("/:id" pattern in show route url) of object which makes request
      "req.user" contains the information(username and id) of current login user, if not login it will be null
- "./" refers to current level in file, "../" refers to the previous level of file path
- at the input in form, we can use name="comment[author]" name="comment[text]" to group text and author into one comment object
- module.exports allows us break things into files to clean up codes and make things modular.
- express.Router() allows us to group all routes together. then use module.exports() to return, in app.js require it and use it
      
RESTful Routes:
name      url                    verb     desc.                                                   Mongoose Method
===============================================================================================================================
Index    /campgrounds            GET     Displays a list of all campgrounds                       Campground.find()
New      /campgrounds/new        GET     Displays form to make a new campground                   N/A
Create   /campgrounds            POST    Add new campground to database                           Campground.create()
Show     /campgrounds/:id        GET     Show more info about one campground                      Campground.findById()
Edit     /campgrounds/:id/edit   GET     Show edit form for one campground                        Campground.findById()
Update   /campgrounds/:id        PUT     Update a particular campground, then redirect somewhere  Campground.findByIdAndUpdate()
Destory  /camprgounds/:id        DELETE  Delete a particular campground, then redirect somewhere  Campground.findByIdAndRemove()
===============================================================================================================================

Middleware
middleware run before the callback function usually to check the state
// middleware to check if the user has logged in
middlewareObj.isLoggedIn = function(req, res, next) {
    if (req.isAuthenticated()) {
        return next();
    }
    // add one-time message to the key "error" in order to display feedback message in page
    req.flash("error", "You need to be logged in to do that");
    res.redirect("/login");
};
// middleware that will run in every single routes so we can use it to add the common variable
app.use(function(req, res, next) {
    // pass user to every single templetes
    res.locals.currentUser = req.user;
    // add feedback message to all routes
    res.locals.error = req.flash("error");
    res.locals.success = req.flash("success");
    // remember to add next() method
    next();
});
