1. ls (-l)(-al) (file path)
to list all contents in current(given) directory
use -l to list all contents of a directory in long format
use -al to show hidden file

2. cd folderName/(folder path)
to get into the given folder

3. cd .. (cd ~)
go back to last level
use ~ to come back to home directory

4. touch fileName
create a new file

5. cat fileName
print the contents of the specified file to the screen

6. more fileName
print the contents of the specified file to the screen, 
but pause once the contents have filled the available screen real estate before printing more; 
when paused: ENTER = move one line down, SPACEBAR = page down, q = quit printing

7. less fileName
like more, but you can move forwards and backwards throughout the file using the arrow, page-up, and page-down keys

8. cp file1 file2
copy a file ("file1" is copied to a new file named "file2")

9. mv file1 newName
move or rename a file ("file1" is renamed to "newname")
ex: mv foo.txt myfoo.txt
    mv myfoo.txt /tmp
    mv /tmp/myfoo.txt anotherfoo.txt

10. head (-n) fileName
print the first few(n) lines of a file

11. tail (-n) filename
print the last few(n) lines of a file

12. wc (-l)(-w)(-c) some_file
counts the number of lines, words, and characters in the file:
use -l counts only the number of lines in the file:
use -w counts only the number of words in the file:
use -c counts only the number of characters in the file:

13. mkdir directoryName
create a new directory

14. rm fileName
delete the file

15. rm -rf directoryName
delete the directory

16. find searchPath -name fileName
search "search_path" for items named "some_name"

17. grep (-r) "find_item" fileName/directoryName
print all the lines/lines of files in "fileName/directoryName" that contain "find_item"
use -r to search in any of its direct or indirect child directores

18. clear
clear the terminal

19. history
get recently history command
use !num to run history command
use ↑ ↓ to skip over the history

20. pwd
print current working directory

21. man (name)
get the tutorial about the particular thing

22. a*.csv
find all files beginning with a and end with .csv

* Pipes 
The pipe symbol "|" is used to direct the output of one command to the input of another.
e.g. ls /etc|sort|tail–n5
get the ls of /etc directory, output to sort, after sorting output to last command to print last 5 lines

The redirection directives, ">" and ">>" can be used on the output of most commands to direct their output to a file.
e.g. head -n 10 some_file > new_file
Redirects the output of the head command (detailed above) to a file "new_file"
e.g. head -n 10 some_file >> exist_file
Redirects the output of the head command to the end of "exist_file"

Command substitution uses the output of one command as an input to another command
and is invoked by enclosing a command as $(command).
e.g. cat $(head -n1 some_file)
This will read the first line from "some_file" and use it as the filename argument to the cat tool, which will print the contents.


* Node.js allows us to write JavaScript on the server side
* npm is a package manager which allows you to install third party software(framewords application libraries) by using command line.

1. node (fileName.js)
to get into the JS mode which can code JS (use control + c to quit)
if you add file name after the node operator command line can execute this file as JS

2. npm install packageName
install npm package like faker and cat-me

* package.json lists the packages that your project depends on,
and makes your build reproducible, therefore much easier to share with other developers.

3. npm init
create a new package.json in current folder

4. npm install express (--save)
install framework express
( save the package to dependency section in package.json file )

5. npm install ejs (--save)
install ejs

6. npm install body-parser (--save)
install body parser to deal with post request

7. npm install request
install request package to make request in JS file

8. npm install mongoose
install mongoose package to write mongoDB in JS

9. npm install method-override (--save)
install method-override package to override the method to be put or delete

10. npm install express-sanitizer (--save)
install sanitizer package to get rid of some bad things in body like alert()

11. npm install passport passport-local (--save)

12. npm install passport-local-mongoose (--save)

13. npm install express-session (--save)
all three above are used for authenticate

14. npm install connect-flash (--save)
connect-flash is used to send feedback message to user

15. npm install -g nodemon
install nodemon to automatically restart the server for you if files have changed

16. export DATABASEURL=mongodb://localhost/yelp_camp_v12
create a environment variable in local in order to change the database automatically

17. heroku config:set KEY=VALUE
create a environment variable in heroku in order to change the database automatically

18. npm i -S geocoder
install geocoder to your project via the terminal in order to use google map api

19. npm i -S moment (shorthand for npm install --save moment)
use Moment JS to add time passed since date created

20. c9 fileName
open file in cloud 9
